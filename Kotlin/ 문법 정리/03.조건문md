# 조건문
## if 
자바에서 if-else가 구문이라면, 코틀린에서는 표현식이다. 표현식이기 때문에 바로 값을 나타낼 수 있다.
```kotlin
val age = 10
val result =
    if (age > 20) "성인"
    else "아이"
```

if-else가 표현식이기 때문에 3항 연산자가 필요 없다
```kotlin
val a = 1
val b = 2
val c = if (a > b) a else b
```

## when
자바에서 switch-case 문과 유사하다. 표현식이기 때문에 리턴값을 가질 수 있다. 

```kotlin
// when 식
val result = when (getColor()) {
    MyColor.BLUE -> 1
    MyColor.GREEN -> 2
    else -> 3
}
```

연산 대상이 1개가 아닐 경우에는 아래처럼 사용할 수도 있다.
```kotlin
// when 문
fun numberDescription(n: Int, m: Int): String = when {
    n == 0 -> "Zero"
    n == 1 || n == 2 || m == 1 || m == 2 -> "Small"
    else -> "Huge"
}
```

## for
자바에서 for 루프와 유사하다

0~3까지 검색
```kotlin
for (i in 0 .. 3) {
    println(i)
}
```

`Iterable` 인터페이스를 구현한 타입이라면 for 대상이 된다.

기타
- step: step 만큼 증가하면서 처리
- until: 마지막 값을 제외하고 처리
- downTo: 값을 -하면서 처리

## 범위를 표현하는 타입
`'..'` 연산자를 사용해서 범위를 표현할 수 있다. 
```kotlin
val chars = 'a' .. 'c'  // a에서 c까지의 CharRange
val twoDigits = 10 .. 99    // 10에서 99까지의 IntRange
```

이를 `'in'` 연산과 조합하면 범위에대한 체크를 할 수 있다. 
```kotlin
val chars = 'a' .. 'c'
println('b' in chars)
```

기타 연산
- `until`: 시작을 포함하고 마지막 값을 제외하는 범위
- `downTo`: 아래로 내려가는 연산. 시작값과 종료값을 포함한다
- `step`: 범위 연산을 할 때 간격을 지정할 수 있다. 
   ```kotlin
   1..10 step 3 // 1, 4, 7, 10
   ```